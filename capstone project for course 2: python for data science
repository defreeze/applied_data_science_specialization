{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": " <a href=\"https://www.bigdatauniversity.com\"><img src = \"https://ibm.box.com/shared/static/ugcqz6ohbvff804xp84y4kqnvvk3bq1g.png\" width = 300, align = \"center\"></a>\n\n<h1 align=center><font size = 5>Data Analysis with Python</font></h1>"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# House Sales in King County, USA"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<b>id</b> : A notation for a house\n\n<b> date</b>: Date house was sold\n\n\n<b>price</b>: Price is prediction target\n\n\n<b>bedrooms</b>: Number of bedrooms\n\n\n<b>bathrooms</b>: Number of bathrooms\n\n<b>sqft_living</b>: Square footage of the home\n\n<b>sqft_lot</b>: Square footage of the lot\n\n\n<b>floors</b> :Total floors (levels) in house\n\n\n<b>waterfront</b> :House which has a view to a waterfront\n\n\n<b>view</b>: Has been viewed\n\n\n<b>condition</b> :How good the condition is overall\n\n<b>grade</b>: overall grade given to the housing unit, based on King County grading system\n\n\n<b>sqft_above</b> : Square footage of house apart from basement\n\n\n<b>sqft_basement</b>: Square footage of the basement\n\n<b>yr_built</b> : Built Year\n\n\n<b>yr_renovated</b> : Year when house was renovated\n\n<b>zipcode</b>: Zip code\n\n\n<b>lat</b>: Latitude coordinate\n\n<b>long</b>: Longitude coordinate\n\n<b>sqft_living15</b> : Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area\n\n\n<b>sqft_lot15</b> : LotSize area in 2015(implies-- some renovations)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "You will require the following libraries: "
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [],
            "source": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# Module 1: Importing Data Sets "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": " Load the csv:  "
        },
        {
            "cell_type": "code",
            "execution_count": 38,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [],
            "source": "file_name='https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/coursera/project/kc_house_data_NaN.csv'\ndf=pd.read_csv(file_name)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "\nWe use the method <code>head</code> to display the first 5 columns of the dataframe."
        },
        {
            "cell_type": "code",
            "execution_count": 39,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>7129300520</td>\n      <td>20141013T000000</td>\n      <td>221900.0</td>\n      <td>3.0</td>\n      <td>1.00</td>\n      <td>1180</td>\n      <td>5650</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1180</td>\n      <td>0</td>\n      <td>1955</td>\n      <td>0</td>\n      <td>98178</td>\n      <td>47.5112</td>\n      <td>-122.257</td>\n      <td>1340</td>\n      <td>5650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>6414100192</td>\n      <td>20141209T000000</td>\n      <td>538000.0</td>\n      <td>3.0</td>\n      <td>2.25</td>\n      <td>2570</td>\n      <td>7242</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>2170</td>\n      <td>400</td>\n      <td>1951</td>\n      <td>1991</td>\n      <td>98125</td>\n      <td>47.7210</td>\n      <td>-122.319</td>\n      <td>1690</td>\n      <td>7639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>5631500400</td>\n      <td>20150225T000000</td>\n      <td>180000.0</td>\n      <td>2.0</td>\n      <td>1.00</td>\n      <td>770</td>\n      <td>10000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>770</td>\n      <td>0</td>\n      <td>1933</td>\n      <td>0</td>\n      <td>98028</td>\n      <td>47.7379</td>\n      <td>-122.233</td>\n      <td>2720</td>\n      <td>8062</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2487200875</td>\n      <td>20141209T000000</td>\n      <td>604000.0</td>\n      <td>4.0</td>\n      <td>3.00</td>\n      <td>1960</td>\n      <td>5000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1050</td>\n      <td>910</td>\n      <td>1965</td>\n      <td>0</td>\n      <td>98136</td>\n      <td>47.5208</td>\n      <td>-122.393</td>\n      <td>1360</td>\n      <td>5000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1954400510</td>\n      <td>20150218T000000</td>\n      <td>510000.0</td>\n      <td>3.0</td>\n      <td>2.00</td>\n      <td>1680</td>\n      <td>8080</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1680</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98074</td>\n      <td>47.6168</td>\n      <td>-122.045</td>\n      <td>1800</td>\n      <td>7503</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows \u00d7 22 columns</p>\n</div>",
                        "text/plain": "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n\n   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n0         1180      5650     1.0           0  ...      7        1180   \n1         2570      7242     2.0           0  ...      7        2170   \n2          770     10000     1.0           0  ...      6         770   \n3         1960      5000     1.0           0  ...      7        1050   \n4         1680      8080     1.0           0  ...      8        1680   \n\n   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n0              0      1955             0    98178  47.5112 -122.257   \n1            400      1951          1991    98125  47.7210 -122.319   \n2              0      1933             0    98028  47.7379 -122.233   \n3            910      1965             0    98136  47.5208 -122.393   \n4              0      1987             0    98074  47.6168 -122.045   \n\n   sqft_living15  sqft_lot15  \n0           1340        5650  \n1           1690        7639  \n2           2720        8062  \n3           1360        5000  \n4           1800        7503  \n\n[5 rows x 22 columns]"
                    },
                    "execution_count": 39,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "df.head()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 1 \nDisplay the data types of each column using the attribute dtype, then take a screenshot and submit it, include your code in the image. "
        },
        {
            "cell_type": "code",
            "execution_count": 35,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "Unnamed: 0         int64\nid                 int64\ndate              object\nprice            float64\nbedrooms         float64\nbathrooms        float64\nsqft_living        int64\nsqft_lot           int64\nfloors           float64\nwaterfront         int64\nview               int64\ncondition          int64\ngrade              int64\nsqft_above         int64\nsqft_basement      int64\nyr_built           int64\nyr_renovated       int64\nzipcode            int64\nlat              float64\nlong             float64\nsqft_living15      int64\nsqft_lot15         int64\ndtype: object"
                    },
                    "execution_count": 35,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "#show the type of each column in the df dataframe\ndf.dtypes"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "We use the method describe to obtain a statistical summary of the dataframe."
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>21613.00000</td>\n      <td>2.161300e+04</td>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>...</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>10806.00000</td>\n      <td>4.580302e+09</td>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>...</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6239.28002</td>\n      <td>2.876566e+09</td>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>...</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.00000</td>\n      <td>1.000102e+06</td>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5403.00000</td>\n      <td>2.123049e+09</td>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>10806.00000</td>\n      <td>3.904930e+09</td>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>16209.00000</td>\n      <td>7.308900e+09</td>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>21612.00000</td>\n      <td>9.900000e+09</td>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>...</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows \u00d7 21 columns</p>\n</div>",
                        "text/plain": "        Unnamed: 0            id         price      bedrooms     bathrooms  \\\ncount  21613.00000  2.161300e+04  2.161300e+04  21600.000000  21603.000000   \nmean   10806.00000  4.580302e+09  5.400881e+05      3.372870      2.115736   \nstd     6239.28002  2.876566e+09  3.671272e+05      0.926657      0.768996   \nmin        0.00000  1.000102e+06  7.500000e+04      1.000000      0.500000   \n25%     5403.00000  2.123049e+09  3.219500e+05      3.000000      1.750000   \n50%    10806.00000  3.904930e+09  4.500000e+05      3.000000      2.250000   \n75%    16209.00000  7.308900e+09  6.450000e+05      4.000000      2.500000   \nmax    21612.00000  9.900000e+09  7.700000e+06     33.000000      8.000000   \n\n        sqft_living      sqft_lot        floors    waterfront          view  \\\ncount  21613.000000  2.161300e+04  21613.000000  21613.000000  21613.000000   \nmean    2079.899736  1.510697e+04      1.494309      0.007542      0.234303   \nstd      918.440897  4.142051e+04      0.539989      0.086517      0.766318   \nmin      290.000000  5.200000e+02      1.000000      0.000000      0.000000   \n25%     1427.000000  5.040000e+03      1.000000      0.000000      0.000000   \n50%     1910.000000  7.618000e+03      1.500000      0.000000      0.000000   \n75%     2550.000000  1.068800e+04      2.000000      0.000000      0.000000   \nmax    13540.000000  1.651359e+06      3.500000      1.000000      4.000000   \n\n       ...         grade    sqft_above  sqft_basement      yr_built  \\\ncount  ...  21613.000000  21613.000000   21613.000000  21613.000000   \nmean   ...      7.656873   1788.390691     291.509045   1971.005136   \nstd    ...      1.175459    828.090978     442.575043     29.373411   \nmin    ...      1.000000    290.000000       0.000000   1900.000000   \n25%    ...      7.000000   1190.000000       0.000000   1951.000000   \n50%    ...      7.000000   1560.000000       0.000000   1975.000000   \n75%    ...      8.000000   2210.000000     560.000000   1997.000000   \nmax    ...     13.000000   9410.000000    4820.000000   2015.000000   \n\n       yr_renovated       zipcode           lat          long  sqft_living15  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000   21613.000000   \nmean      84.402258  98077.939805     47.560053   -122.213896    1986.552492   \nstd      401.679240     53.505026      0.138564      0.140828     685.391304   \nmin        0.000000  98001.000000     47.155900   -122.519000     399.000000   \n25%        0.000000  98033.000000     47.471000   -122.328000    1490.000000   \n50%        0.000000  98065.000000     47.571800   -122.230000    1840.000000   \n75%        0.000000  98118.000000     47.678000   -122.125000    2360.000000   \nmax     2015.000000  98199.000000     47.777600   -121.315000    6210.000000   \n\n          sqft_lot15  \ncount   21613.000000  \nmean    12768.455652  \nstd     27304.179631  \nmin       651.000000  \n25%      5100.000000  \n50%      7620.000000  \n75%     10083.000000  \nmax    871200.000000  \n\n[8 rows x 21 columns]"
                    },
                    "execution_count": 10,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "df.describe()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# Module 2: Data Wrangling"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 2 \nDrop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the <code>inplace</code> parameter is set to <code>True</code>"
        },
        {
            "cell_type": "code",
            "execution_count": 40,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>3.409430</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>0.650743</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\ncount  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \nmean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \nstd    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \nmin    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \nmax    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n\n             floors    waterfront          view     condition         grade  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \nmean       1.494309      0.007542      0.234303      3.409430      7.656873   \nstd        0.539989      0.086517      0.766318      0.650743      1.175459   \nmin        1.000000      0.000000      0.000000      1.000000      1.000000   \n25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n75%        2.000000      0.000000      0.000000      4.000000      8.000000   \nmax        3.500000      1.000000      4.000000      5.000000     13.000000   \n\n         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\ncount  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \nmean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \nstd      828.090978     442.575043     29.373411    401.679240     53.505026   \nmin      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \nmax     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n\n                lat          long  sqft_living15     sqft_lot15  \ncount  21613.000000  21613.000000   21613.000000   21613.000000  \nmean      47.560053   -122.213896    1986.552492   12768.455652  \nstd        0.138564      0.140828     685.391304   27304.179631  \nmin       47.155900   -122.519000     399.000000     651.000000  \n25%       47.471000   -122.328000    1490.000000    5100.000000  \n50%       47.571800   -122.230000    1840.000000    7620.000000  \n75%       47.678000   -122.125000    2360.000000   10083.000000  \nmax       47.777600   -121.315000    6210.000000  871200.000000  "
                    },
                    "execution_count": 40,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "#drop two columns from the dataframe permanently \ndf.drop(['id', 'Unnamed: 0'], axis=1, inplace=True)\ndf.describe()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>"
        },
        {
            "cell_type": "code",
            "execution_count": 41,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "number of NaN values for the column bedrooms : 13\nnumber of NaN values for the column bathrooms : 10\n"
                }
            ],
            "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "\nWe can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>"
        },
        {
            "cell_type": "code",
            "execution_count": 42,
            "metadata": {},
            "outputs": [],
            "source": "mean=df['bedrooms'].mean()\ndf['bedrooms'].replace(np.nan,mean, inplace=True)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "\nWe also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>"
        },
        {
            "cell_type": "code",
            "execution_count": 43,
            "metadata": {},
            "outputs": [],
            "source": "mean=df['bathrooms'].mean()\ndf['bathrooms'].replace(np.nan,mean, inplace=True)"
        },
        {
            "cell_type": "code",
            "execution_count": 44,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "number of NaN values for the column bedrooms : 0\nnumber of NaN values for the column bathrooms : 0\n"
                }
            ],
            "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# Module 3: Exploratory Data Analysis"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 3\nUse the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a dataframe.\n"
        },
        {
            "cell_type": "code",
            "execution_count": 46,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>floors</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1.0</th>\n      <td>10680</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>8241</td>\n    </tr>\n    <tr>\n      <th>1.5</th>\n      <td>1910</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>613</td>\n    </tr>\n    <tr>\n      <th>2.5</th>\n      <td>161</td>\n    </tr>\n    <tr>\n      <th>3.5</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "     floors\n1.0   10680\n2.0    8241\n1.5    1910\n3.0     613\n2.5     161\n3.5       8"
                    },
                    "execution_count": 46,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "df.floors.value_counts().to_frame()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 4\nUse the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers."
        },
        {
            "cell_type": "code",
            "execution_count": 47,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f69dc908650>"
                    },
                    "execution_count": 47,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "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\n",
                        "text/plain": "<Figure size 432x288 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "#boxplot for waterfront vs expected price\nsns.boxplot(df.waterfront, df.price)\n\n# What we find is that houses with a waterfront have a higher expected price but houses without a waterfront have more outliers.\n# This is based on visual inspection."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 5\nUse the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price."
        },
        {
            "cell_type": "code",
            "execution_count": 48,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f69d416d710>"
                    },
                    "execution_count": 48,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "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\n",
                        "text/plain": "<Figure size 432x288 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "sns.regplot(df.sqft_above, df.price)\n\n# There seems a clear posive correlation between price and sqft_above."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "\nWe can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price."
        },
        {
            "cell_type": "code",
            "execution_count": 49,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "zipcode         -0.053203\nlong             0.021626\ncondition        0.036362\nyr_built         0.054012\nsqft_lot15       0.082447\nsqft_lot         0.089661\nyr_renovated     0.126434\nfloors           0.256794\nwaterfront       0.266369\nlat              0.307003\nbedrooms         0.308797\nsqft_basement    0.323816\nview             0.397293\nbathrooms        0.525738\nsqft_living15    0.585379\nsqft_above       0.605567\ngrade            0.667434\nsqft_living      0.702035\nprice            1.000000\nName: price, dtype: float64"
                    },
                    "execution_count": 49,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "df.corr()['price'].sort_values()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# Module 4: Model Development"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "\nWe can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2."
        },
        {
            "cell_type": "code",
            "execution_count": 50,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.00046769430149007363"
                    },
                    "execution_count": 50,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "X = df[['long']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question  6\nFit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2. Take a screenshot of your code and the value of the R^2."
        },
        {
            "cell_type": "code",
            "execution_count": 54,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.4928532179037931"
                    },
                    "execution_count": 54,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 432x288 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "# To get a sense of the relation between swft_living and price, i first create a plot to visualy inspect the relation.\nsns.regplot(df.sqft_living, df.price)\n\n# Secondlt, i calculate the R^2\nX = df[['sqft_living']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)\n# the R^2 is 0.4928532179037931"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 7\nFit a linear regression model to predict the <code>'price'</code> using the list of features:"
        },
        {
            "cell_type": "code",
            "execution_count": 55,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "['floors',\n 'waterfront',\n 'lat',\n 'bedrooms',\n 'sqft_basement',\n 'view',\n 'bathrooms',\n 'sqft_living15',\n 'sqft_above',\n 'grade',\n 'sqft_living']"
                    },
                    "execution_count": 55,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"] \n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Then calculate the R^2. Take a screenshot of your code."
        },
        {
            "cell_type": "code",
            "execution_count": 60,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.657679183672129"
                    },
                    "execution_count": 60,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# fit a linear regression model and calculate the R^2\nX = df[features]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)\n# THe R^2 is 0.657679183672129"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### This will help with Question 8\n\nCreate a list of tuples, the first element in the tuple contains the name of the estimator:\n\n<code>'scale'</code>\n\n<code>'polynomial'</code>\n\n<code>'model'</code>\n\nThe second element in the tuple  contains the model constructor \n\n<code>StandardScaler()</code>\n\n<code>PolynomialFeatures(include_bias=False)</code>\n\n<code>LinearRegression()</code>\n"
        },
        {
            "cell_type": "code",
            "execution_count": 61,
            "metadata": {},
            "outputs": [],
            "source": "Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 8\nUse the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2."
        },
        {
            "cell_type": "code",
            "execution_count": 62,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.7513408553309376"
                    },
                    "execution_count": 62,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# First a pipeline object is created.\n# secondly the X and Y variables in the previous expercise are fitted and a R^2 value is calculated.\npipe= Pipeline(Input)\npipe.fit(X,Y)\npipe.score(X,Y)\n\n# The R^2 value is 0.7513408553309376."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# Module 5: Model Evaluation and Refinement"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Import the necessary modules:"
        },
        {
            "cell_type": "code",
            "execution_count": 63,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "done\n"
                }
            ],
            "source": "from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nprint(\"done\")"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "We will split the data into training and testing sets:"
        },
        {
            "cell_type": "code",
            "execution_count": 64,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "number of test samples: 3242\nnumber of training samples: 18371\n"
                }
            ],
            "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n\nprint(\"number of test samples:\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 9\nCreate and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data. \n"
        },
        {
            "cell_type": "code",
            "execution_count": 65,
            "metadata": {},
            "outputs": [],
            "source": "from sklearn.linear_model import Ridge"
        },
        {
            "cell_type": "code",
            "execution_count": 66,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.6478759163939122"
                    },
                    "execution_count": 66,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# First a ridge model is created and then fitted and a R^2 value is calculated\nRidgeModel = Ridge(alpha=0.1)\nRidgeModel.fit(x_train, y_train)\nRidgeModel.score(x_test, y_test)\n# The R^2 value is 0.6478759163939122."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Question 10\nPerform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2."
        },
        {
            "cell_type": "code",
            "execution_count": 67,
            "metadata": {
                "jupyter": {
                    "outputs_hidden": false
                }
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.7002744279896707"
                    },
                    "execution_count": 67,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# First a polynomial transform is doe on both sets of training data\npf= PolynomialFeatures(degree=2)\nx_train_pf= pf.fit_transform(x_train[features])\nx_test_pf= pf.fit_transform(x_test[features])\n\n#then a ridge regression object is used to fit the data and then calculate an R^2 value.\nRidgeModel = Ridge(alpha=0.1)\nRidgeModel.fit(x_train_pf, y_train)\nRidgeModel.score(x_test_pf, y_test)\n# The R^2 value is 0.7002744279896707."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<p>Once you complete your notebook you will have to share it. Select the icon on the top right a marked in red in the image below, a dialogue box should open, and select the option all&nbsp;content excluding sensitive code cells.</p>\n        <p><img width=\"600\" src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/coursera/project/save_notebook.png\" alt=\"share notebook\"  style=\"display: block; margin-left: auto; margin-right: auto;\"/></p>\n        <p></p>\n        <p>You can then share the notebook&nbsp; via a&nbsp; URL by scrolling down as shown in the following image:</p>\n        <p style=\"text-align: center;\"><img width=\"600\"  src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/coursera/project/url_notebook.png\" alt=\"HTML\" style=\"display: block; margin-left: auto; margin-right: auto;\" /></p>\n        <p>&nbsp;</p>"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<h2>About the Authors:</h2> \n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/\">Michelle Carey</a>, <a href=\"www.linkedin.com/in/jiahui-mavis-zhou-a4537814a\">Mavis Zhou</a> "
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": ""
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.7",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.7.9"
        },
        "widgets": {
            "state": {},
            "version": "1.1.2"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}